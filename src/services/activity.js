'use server';
// Activity service for handling activity and AI suggestions for the dashboard
import { findDailies } from '@/models/wize-log/queries';
import { findTasks } from '@/models/wize-task/queries';
import { findProjects } from '@/models/wize-project/queries';
import { executeGraphQL } from '@/utils/execute';

const service = 'wize-log';

/**
 * Get recent activities across the application
 * This aggregates data from logs, tasks, and projects to create a unified activity feed
 * 
 * @param {number} limit - Maximum number of activities to return
 * @returns {Promise<Array>} - List of recent activities
 */
export const getActivities = async (limit = 5) => {
    try {
        // Get the most recent daily logs
        const logsData = await executeGraphQL(service, findDailies, {
            filter: {}, // Required empty filter object
            sort: { createdAt: 'DESC' },
            paging: { limit, offset: 0 }
        });

        // Check the structure of the response and extract the logs array
        // The API returns { findDailies: { count: number, data: Array } } instead of just an array
        const logs = logsData?.findDailies?.data || [];

        // Transform logs into activity format
        const activities = logs.map(log => ({
            id: log._id || log.id, // Use _id as fallback since GraphQL often returns _id
            type: 'log',
            title: log.summary || 'Daily Log Entry',
            description: log.details || 'Log entry added',
            timestamp: log.createdAt,
            user: { name: log.submittedBy || log.createdBy || 'System User' },
            relatedItem: {
                type: 'log',
                id: log._id || log.id
            }
        }));

        return activities;
    } catch (error) {
        console.error("Error fetching activities:", error);
        // Return empty array instead of throwing to prevent dashboard crashes
        return [];
    }
};

/**
 * Get AI-generated suggestions for the dashboard
 * In a real implementation, this would use AI models to analyze project data
 * and generate actionable insights
 * 
 * @returns {Promise<Array>} - List of AI suggestions
 */
export const getAiSuggestions = async () => {
    try {
        // In a production environment, these would be generated by AI based on
        // analysis of project data, task progress, equipment usage, etc.
        // For now, we return static examples
        return [
            {
                id: '1',
                text: 'Schedule equipment maintenance for the excavator based on usage patterns.',
                priority: 'medium',
            },
            {
                id: '2',
                text: 'Consider allocating more resources to the Riverside project to maintain the current ahead-of-schedule status.',
                priority: 'high',
            },
            {
                id: '3',
                text: 'Review material costs on the Downtown Office project - spending is 7% over budget.',
                priority: 'high',
            }
        ];
    } catch (error) {
        console.error("Error generating AI suggestions:", error);
        return [];
    }
};